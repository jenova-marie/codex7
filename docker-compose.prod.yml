# üê≥ Docker Compose - Production
#
# Optimized configuration for production deployment
#
# Usage:
#   docker-compose -f docker-compose.prod.yml up -d
#   docker-compose -f docker-compose.prod.yml logs -f
#   docker-compose -f docker-compose.prod.yml down

version: '3.9'

services:
  # üêò PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: codex7-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=en_US.UTF-8'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backups:/backups
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # üî¥ Redis - Job queue and caching
  redis:
    image: redis:7-alpine
    container_name: codex7-redis
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üì° MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: packages/mcp-server/Dockerfile
      target: production
    container_name: codex7-mcp-server
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - mcp_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2

  # üåê REST API
  api:
    build:
      context: .
      dockerfile: packages/api/Dockerfile
      target: production
    container_name: codex7-api
    restart: always
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2

  # üîç Document Indexer
  indexer:
    build:
      context: .
      dockerfile: packages/indexer/Dockerfile
      target: production
    container_name: codex7-indexer
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      INDEXER_CONCURRENCY: ${INDEXER_CONCURRENCY:-10}
    volumes:
      - indexer_logs:/app/logs
      - indexer_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G

  # üé® Web UI (Static Files via nginx)
  web:
    build:
      context: .
      dockerfile: packages/web/Dockerfile
      target: production
    container_name: codex7-web
    restart: always
    depends_on:
      - api
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # üîí Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: codex7-nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - web
    networks:
      - codex7-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# üíæ Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mcp_logs:
    driver: local
  api_logs:
    driver: local
  indexer_logs:
    driver: local
  indexer_cache:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

# üåê Networks
networks:
  codex7-network:
    driver: bridge
    name: codex7-network
